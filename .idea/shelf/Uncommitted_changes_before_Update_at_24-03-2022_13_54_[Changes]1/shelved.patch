Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.domain;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Review {\r\n    private int reviewId;\r\n    private String companyName;\r\n    private String prosMessage;\r\n    private String consMessage;\r\n    private Date reviewDate;\r\n    private WorkDetails workDetails;\r\n\r\n    enum Ratings {\r\n        POOR,\r\n        NOT_BAD,\r\n        GOOD,\r\n        VERY_GOOD,\r\n        EXCELLENT\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java	
@@ -3,6 +3,8 @@
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import org.springframework.data.mongodb.core.index.Indexed;
+import org.springframework.data.mongodb.core.mapping.Document;
 
 import java.util.Date;
 
@@ -10,12 +12,12 @@
 @NoArgsConstructor
 @AllArgsConstructor
 public class Review {
+    @Indexed(unique = true)
     private int reviewId;
-    private String companyName;
+    private User user;
     private String prosMessage;
     private String consMessage;
     private Date reviewDate;
-    private WorkDetails workDetails;
 
     enum Ratings {
         POOR,
Index: resources-service/src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>server.port=8087\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/resources-service/src/main/resources/application.properties b/resources-service/src/main/resources/application.properties
--- a/resources-service/src/main/resources/application.properties	
+++ b/resources-service/src/main/resources/application.properties	
@@ -1,1 +1,5 @@
 server.port=8087
+
+spring.data.mongodb.database=jobizard
+spring.data.mongodb.uri=mongodb://localhost:27017/
+server.error.include-message=always
Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.domain;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class WorkDetails {\r\n\r\n    private boolean currentlyWorking;\r\n    private String jobRole;\r\n    private String yearsOfExperience;\r\n\r\n    enum WorkingDays{\r\n        MONDAY,\r\n        TUESDAY,\r\n        WEDNESDAY,\r\n        THURSDAY,\r\n        FRIDAY,\r\n        SATURDAY,\r\n        SUNDAY\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java	
@@ -8,18 +8,9 @@
 @NoArgsConstructor
 @AllArgsConstructor
 public class WorkDetails {
-
     private boolean currentlyWorking;
     private String jobRole;
     private String yearsOfExperience;
-
-    enum WorkingDays{
-        MONDAY,
-        TUESDAY,
-        WEDNESDAY,
-        THURSDAY,
-        FRIDAY,
-        SATURDAY,
-        SUNDAY
-    }
+    private int workHoursPerDay;
+    private int workDaysPerWeek;
 }
Index: resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewNotFoundException.java b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewNotFoundException.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewNotFoundException.java	
@@ -0,0 +1,8 @@
+package com.stackroute.resourcesservice.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "Review doesn't exist")
+public class ReviewNotFoundException extends Exception{
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java	
@@ -0,0 +1,18 @@
+package com.stackroute.resourcesservice.service;
+
+import com.stackroute.resourcesservice.domain.Company;
+import com.stackroute.resourcesservice.domain.Review;
+import com.stackroute.resourcesservice.exception.*;
+
+import java.util.List;
+
+public interface ReviewService {
+    public Company saveCompany(Company company) throws CompanyAlreadyExistsException;
+    public Company getCompanyByCompanyName(String companyName) throws CompanyNotFoundException;
+    public List<Company> getAllCompanies() throws CompanyNotFoundException;
+    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException;
+    public Review saveReview(Review review, String CompanyName) throws CompanyNotFoundException, ReviewAlreadyExistsException;
+    public Review updateReviewByReviewIdAndCompanyName(String companyName, int reviewId) throws ReviewNotFoundException;
+    public List<Review> getAllReviewsByUserEmail(String userEmail)throws UserNotFoundException;
+    public boolean deleteReviewByUserEmailAndReviewId(String userEmail, int reviewId);
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java	
@@ -0,0 +1,10 @@
+package com.stackroute.resourcesservice.repository;
+
+import com.stackroute.resourcesservice.domain.Company;
+import org.springframework.data.mongodb.repository.MongoRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface ReviewRepository extends MongoRepository<Company, Integer> {
+    public Company findByCompanyName(String companyName);
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/User.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/User.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/User.java	
@@ -0,0 +1,19 @@
+package com.stackroute.resourcesservice.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.data.mongodb.core.index.Indexed;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class User {
+    @Indexed(unique = true)
+    private int userId;
+    private int email;
+    private String firstName;
+    private String middleName;
+    private String lastName;
+    private WorkDetails workDetails;
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java b/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java	
@@ -0,0 +1,52 @@
+package com.stackroute.resourcesservice.controller;
+
+import com.stackroute.resourcesservice.domain.Company;
+import com.stackroute.resourcesservice.exception.CompanyAlreadyExistsException;
+import com.stackroute.resourcesservice.exception.CompanyNotFoundException;
+import com.stackroute.resourcesservice.service.ReviewServiceImpl;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+@RestController
+@RequestMapping("api/v1/resources/")
+public class ReviewController {
+
+    ReviewServiceImpl reviewService;
+
+    @Autowired
+    public ReviewController(ReviewServiceImpl reviewService) {
+        this.reviewService = reviewService;
+    }
+
+    ResponseEntity responseEntity;
+
+    @PostMapping("saveCompany")
+    public ResponseEntity<?> saveCompany(@RequestBody Company company) throws CompanyAlreadyExistsException {
+
+        try{
+            responseEntity = new ResponseEntity<>(reviewService.saveCompany(company), HttpStatus.CREATED);
+        } catch (CompanyAlreadyExistsException e) {
+            throw new CompanyAlreadyExistsException();
+        }catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+
+        return responseEntity;
+    }
+
+    @GetMapping("get_company/{companyName}")
+    public ResponseEntity<?> getCompanyByCompanyName(@PathVariable String companyName) throws CompanyNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(reviewService.getCompanyByCompanyName(companyName), HttpStatus.FOUND);
+        } catch (CompanyNotFoundException e) {
+            throw new CompanyNotFoundException();
+        }catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+
+}
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"Encoding\">\r\n    <file url=\"file://$PROJECT_DIR$/api-gateway/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/assessment-service/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/chatbot-service/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/config-server/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/cv-generation-service/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/cv-generation-service/src/main/resources\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/eureka-server/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/product-webapp/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/recommendation-service/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/recruitment-service/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/resources-service/src/main/java\" charset=\"UTF-8\" />\r\n    <file url=\"file://$PROJECT_DIR$/trend-lab-service/src/main/java\" charset=\"UTF-8\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
--- a/.idea/encodings.xml	
+++ b/.idea/encodings.xml	
@@ -12,6 +12,8 @@
     <file url="file://$PROJECT_DIR$/recommendation-service/src/main/java" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/recruitment-service/src/main/java" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/resources-service/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
     <file url="file://$PROJECT_DIR$/trend-lab-service/src/main/java" charset="UTF-8" />
   </component>
 </project>
\ No newline at end of file
Index: resources-service/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>com.stackroute</groupId>\r\n\t\t<artifactId>jobizard</artifactId>\r\n\t\t<version>1.0.0</version>\r\n\t</parent>\r\n\t<groupId>com.stackroute</groupId>\r\n\t<artifactId>resources-service</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>resources-service</name>\r\n\t<description>Resources Service for Jobizard project</description>\r\n\t<properties>\r\n\t\t<java.version>11</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.projectlombok</groupId>\r\n\t\t\t<artifactId>lombok</artifactId>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/pom.xml b/resources-service/pom.xml
--- a/resources-service/pom.xml	
+++ b/resources-service/pom.xml	
@@ -30,6 +30,10 @@
 			<artifactId>spring-boot-starter-test</artifactId>
 			<scope>test</scope>
 		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-mongodb</artifactId>
+		</dependency>
 	</dependencies>
 
 	<build>
Index: resources-service/src/main/java/com/stackroute/resourcesservice/exception/UserNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/exception/UserNotFoundException.java b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/UserNotFoundException.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/UserNotFoundException.java	
@@ -0,0 +1,8 @@
+package com.stackroute.resourcesservice.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "User doesn't exists")
+public class UserNotFoundException extends Exception{
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java	
@@ -0,0 +1,69 @@
+package com.stackroute.resourcesservice.service;
+
+import com.stackroute.resourcesservice.domain.Company;
+import com.stackroute.resourcesservice.domain.Review;
+import com.stackroute.resourcesservice.exception.*;
+import com.stackroute.resourcesservice.repository.ReviewRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class ReviewServiceImpl implements ReviewService {
+
+    private ReviewRepository reviewRepository;
+
+    @Autowired
+    public ReviewServiceImpl(ReviewRepository reviewRepository) {
+        this.reviewRepository = reviewRepository;
+    }
+
+    @Override
+    public Company saveCompany(Company company) throws CompanyAlreadyExistsException {
+
+        if(reviewRepository.findById(company.getCompanyId()).isPresent() || reviewRepository.findByCompanyName(company.getCompanyName()) != null)
+            throw new CompanyAlreadyExistsException();
+
+        return reviewRepository.save(company);
+    }
+
+    @Override
+    public Company getCompanyByCompanyName(String companyName) throws CompanyNotFoundException {
+        Company company;
+        company = reviewRepository.findByCompanyName(companyName);
+        if(company == null)
+            throw new CompanyNotFoundException();
+        return company;
+    }
+
+    @Override
+    public List<Company> getAllCompanies() throws CompanyNotFoundException {
+        return null;
+    }
+
+    @Override
+    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException {
+        return null;
+    }
+
+    @Override
+    public Review saveReview(Review review, String CompanyName) throws CompanyNotFoundException, ReviewAlreadyExistsException {
+        return null;
+    }
+
+    @Override
+    public Review updateReviewByReviewIdAndCompanyName(String companyName, int reviewId) throws ReviewNotFoundException {
+        return null;
+    }
+
+    @Override
+    public List<Review> getAllReviewsByUserEmail(String userEmail) throws UserNotFoundException {
+        return null;
+    }
+
+    @Override
+    public boolean deleteReviewByUserEmailAndReviewId(String userEmail, int reviewId) {
+        return false;
+    }
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyAlreadyExistsException.java b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyAlreadyExistsException.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyAlreadyExistsException.java	
@@ -0,0 +1,8 @@
+package com.stackroute.resourcesservice.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(code = HttpStatus.FOUND, reason = "Company already exists")
+public class CompanyAlreadyExistsException extends Exception {
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewAlreadyExistsException.java b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewAlreadyExistsException.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewAlreadyExistsException.java	
@@ -0,0 +1,8 @@
+package com.stackroute.resourcesservice.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(code = HttpStatus.FOUND, reason = "Review already exists exception.")
+public class ReviewAlreadyExistsException extends Exception{
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java	
@@ -0,0 +1,23 @@
+package com.stackroute.resourcesservice.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.data.annotation.Id;
+import org.springframework.data.mongodb.core.index.Indexed;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+import java.util.List;
+
+@Document(collection = "companyReviews")
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class Company {
+    @Id
+    private int companyId;
+    @Indexed(unique = true)
+    private String companyName;
+    private byte[] companyLogo;
+    private List<Review> reviews;
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyNotFoundException.java b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyNotFoundException.java
new file mode 100644
--- /dev/null	
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyNotFoundException.java	
@@ -0,0 +1,8 @@
+package com.stackroute.resourcesservice.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "Company does not exist")
+public class CompanyNotFoundException extends Exception{
+}
