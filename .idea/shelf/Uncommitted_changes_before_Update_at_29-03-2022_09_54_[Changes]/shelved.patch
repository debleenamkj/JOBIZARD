Index: resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.controller;\r\n\r\nimport com.stackroute.resourcesservice.domain.Company;\r\nimport com.stackroute.resourcesservice.exception.CompanyAlreadyExistsException;\r\nimport com.stackroute.resourcesservice.exception.CompanyNotFoundException;\r\nimport com.stackroute.resourcesservice.service.ReviewServiceImpl;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"api/v1/resources/\")\r\npublic class ReviewController {\r\n\r\n    ReviewServiceImpl reviewService;\r\n\r\n    @Autowired\r\n    public ReviewController(ReviewServiceImpl reviewService) {\r\n        this.reviewService = reviewService;\r\n    }\r\n\r\n    ResponseEntity responseEntity;\r\n\r\n    @PostMapping(\"saveCompany\")\r\n    public ResponseEntity<?> saveCompany(@RequestBody Company company) throws CompanyAlreadyExistsException {\r\n\r\n        try{\r\n            responseEntity = new ResponseEntity<>(reviewService.saveCompany(company), HttpStatus.CREATED);\r\n        } catch (CompanyAlreadyExistsException e) {\r\n            throw new CompanyAlreadyExistsException();\r\n        }catch (Exception e){\r\n            responseEntity = new ResponseEntity<>(\"Internal Server Error\", HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n\r\n        return responseEntity;\r\n    }\r\n\r\n    @GetMapping(\"get_company/{companyName}\")\r\n    public ResponseEntity<?> getCompanyByCompanyName(@PathVariable String companyName) throws CompanyNotFoundException {\r\n        try{\r\n            responseEntity = new ResponseEntity<>(reviewService.getCompanyByCompanyName(companyName), HttpStatus.FOUND);\r\n        } catch (CompanyNotFoundException e) {\r\n            throw new CompanyNotFoundException();\r\n        }catch (Exception e){\r\n            responseEntity = new ResponseEntity<>(\"Internal Server Error\", HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n        return responseEntity;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java b/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java	(revision 2084353c395b17ea6fa3f6a333b54ee39d76c9c4)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java	(date 1648462528426)
@@ -1,31 +1,49 @@
 package com.stackroute.resourcesservice.controller;
 
 import com.stackroute.resourcesservice.domain.Company;
+import com.stackroute.resourcesservice.domain.Review;
 import com.stackroute.resourcesservice.exception.CompanyAlreadyExistsException;
 import com.stackroute.resourcesservice.exception.CompanyNotFoundException;
+import com.stackroute.resourcesservice.exception.ReviewAlreadyExistsException;
+import com.stackroute.resourcesservice.exception.ReviewNotFoundException;
+import com.stackroute.resourcesservice.service.SequenceService;
 import com.stackroute.resourcesservice.service.ReviewServiceImpl;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.util.zip.DataFormatException;
+import java.util.zip.Deflater;
+import java.util.zip.Inflater;
 
 @RestController
 @RequestMapping("api/v1/resources/")
 public class ReviewController {
 
-    ReviewServiceImpl reviewService;
+    private ReviewServiceImpl reviewService;
+    private SequenceService sequenceService;
 
     @Autowired
-    public ReviewController(ReviewServiceImpl reviewService) {
+    public ReviewController(ReviewServiceImpl reviewService, SequenceService sequenceService) {
         this.reviewService = reviewService;
+        this.sequenceService = sequenceService;
     }
 
-    ResponseEntity responseEntity;
 
+    private ResponseEntity responseEntity;
+
+    //***Company Methods***
     @PostMapping("saveCompany")
-    public ResponseEntity<?> saveCompany(@RequestBody Company company) throws CompanyAlreadyExistsException {
+    public ResponseEntity<?> saveCompany(@RequestPart(name = "companyObj") Company company, @RequestPart(name = "imageFile", required = false)MultipartFile image) throws CompanyAlreadyExistsException {
 
         try{
+            if(image != null){
+                company.setCompanyLogo(compressBytes(image.getBytes()));
+            }
             responseEntity = new ResponseEntity<>(reviewService.saveCompany(company), HttpStatus.CREATED);
         } catch (CompanyAlreadyExistsException e) {
             throw new CompanyAlreadyExistsException();
@@ -33,14 +51,112 @@
             responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
         }
 
+        return responseEntity;
+    }
+
+    @GetMapping("get_company")
+    public ResponseEntity<?> getCompanyByCompanyName(@RequestParam("companyName") String companyName) throws CompanyNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(reviewService.getCompanyByCompanyName(companyName), HttpStatus.OK);
+        } catch (CompanyNotFoundException e) {
+            throw new CompanyNotFoundException();
+        }catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @GetMapping("get_all_companies")
+    public ResponseEntity getAllCompanies() throws CompanyNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(reviewService.getAllCompanies(), HttpStatus.OK);
+        } catch (CompanyNotFoundException e) {
+            throw new CompanyNotFoundException();
+        } catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @DeleteMapping("delete_company")
+    public ResponseEntity<?> deleteCompanyByCompanyName(@RequestParam("companyName") String companyName) throws CompanyNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(reviewService.deleteCompanyByCompanyName(companyName), HttpStatus.OK);
+        } catch (CompanyNotFoundException e) {
+            throw new CompanyNotFoundException();
+        } catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
         return responseEntity;
     }
-
-    @GetMapping("get_company/{companyName}")
-    public ResponseEntity<?> getCompanyByCompanyName(@PathVariable String companyName) throws CompanyNotFoundException {
+    @PutMapping("update_company")
+    public ResponseEntity<?> updateCompany(@RequestBody Company company) throws CompanyNotFoundException {
         try{
-            responseEntity = new ResponseEntity<>(reviewService.getCompanyByCompanyName(companyName), HttpStatus.FOUND);
+            responseEntity = new ResponseEntity<>(reviewService.updateCompanyExceptReviews(company), HttpStatus.OK);
         } catch (CompanyNotFoundException e) {
+            throw new CompanyNotFoundException();
+        } catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+
+    //***Review Methods***
+
+    @PostMapping("saveReview")
+    public ResponseEntity<?> saveReviewByCompanyNameAndReviewId(@RequestBody Review review, @RequestParam("companyName") String companyName) throws ReviewAlreadyExistsException, CompanyNotFoundException {
+        try{
+            review.setReviewId(sequenceService.getSequenceNumber(Review.sequenceName));
+            System.out.println(Review.sequenceName);
+            responseEntity = new ResponseEntity<>(reviewService.saveReview(review, companyName), HttpStatus.CREATED);
+        } catch (ReviewAlreadyExistsException ex) {
+            throw new ReviewAlreadyExistsException();
+        } catch (CompanyNotFoundException ex) {
+            throw new CompanyNotFoundException();
+        }catch (Exception e){
+            System.out.println(e.toString());
+            e.printStackTrace();
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @PutMapping("updateReview")
+    public ResponseEntity<?> updateReviewByCompanyNameAndReviewId(@RequestBody Review review, @RequestParam("companyName") String companyName) throws CompanyNotFoundException, ReviewNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(reviewService.updateReviewByCompanyName(companyName, review), HttpStatus.OK);
+        } catch (ReviewNotFoundException exception) {
+            throw new ReviewNotFoundException();
+        } catch (CompanyNotFoundException ex) {
+            throw new CompanyNotFoundException();
+        }catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @DeleteMapping("deleteReview")
+    public ResponseEntity<?> deleteReviewByCompanyNameAndReviewId(@RequestParam("reviewId") int reviewId, @RequestParam("companyName") String companyName) throws CompanyNotFoundException, ReviewNotFoundException {
+        try {
+            responseEntity = new ResponseEntity<>(reviewService.deleteReviewByCompanyNameAndReviewId(companyName, reviewId), HttpStatus.OK);
+        } catch (ReviewNotFoundException exception) {
+            throw new ReviewNotFoundException();
+        } catch (CompanyNotFoundException ex) {
+            throw new CompanyNotFoundException();
+        }catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @GetMapping("get_reviews")
+    public ResponseEntity<?> getReviewsByCompanyName(@RequestParam("companyName") String companyName) throws ReviewNotFoundException, CompanyNotFoundException {
+        try {
+            responseEntity = new ResponseEntity<>(reviewService.getAllReviewsByCompanyName(companyName), HttpStatus.OK);
+        } catch (ReviewNotFoundException exception) {
+            throw new ReviewNotFoundException();
+        } catch (CompanyNotFoundException ex) {
             throw new CompanyNotFoundException();
         }catch (Exception e){
             responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
@@ -49,4 +165,47 @@
     }
 
 
+    public static byte[] compressBytes(byte[] image){
+        Deflater deflater = new Deflater();
+        deflater.setInput(image);
+        deflater.finish();
+
+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(image.length);
+        byte[] buffer = new byte[1024];
+        while(!deflater.finished()){
+            int count = deflater.deflate(buffer);
+            outputStream.write(buffer, 0, count);
+        }
+        try{
+            outputStream.close();
+        } catch (IOException e) {
+            System.out.println(e.toString());
+        }
+        System.out.println("Compresssed Byte Size: "+outputStream.toByteArray().length );
+        return outputStream.toByteArray();
+    }
+    public static byte[] decompressBytes(byte[] image){
+
+        Inflater inflater = new Inflater();
+        inflater.setInput(image);
+
+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(image.length);
+        byte[] buffer = new byte[1024];
+
+        try{
+            while (!inflater.finished()){
+                int count = inflater.inflate(buffer);
+
+                outputStream.write(buffer, 0, count);
+            }
+            outputStream.close();
+        } catch (DataFormatException e) {
+            System.out.println(e.toString());
+        } catch (IOException e) {
+            System.out.println(e.toString());
+        }
+
+        return outputStream.toByteArray();
+    }
+
 }
Index: resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.service;\r\n\r\nimport com.stackroute.resourcesservice.domain.Company;\r\nimport com.stackroute.resourcesservice.domain.Review;\r\nimport com.stackroute.resourcesservice.exception.*;\r\n\r\nimport java.util.List;\r\n\r\npublic interface ReviewService {\r\n    public Company saveCompany(Company company) throws CompanyAlreadyExistsException;\r\n    public Company getCompanyByCompanyName(String companyName) throws CompanyNotFoundException;\r\n    public List<Company> getAllCompanies() throws CompanyNotFoundException;\r\n    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException;\r\n    public Review saveReview(Review review, String CompanyName) throws CompanyNotFoundException, ReviewAlreadyExistsException;\r\n    public Review updateReviewByReviewIdAndCompanyName(String companyName, int reviewId) throws ReviewNotFoundException;\r\n    public List<Review> getAllReviewsByUserEmail(String userEmail)throws UserNotFoundException;\r\n    public boolean deleteReviewByUserEmailAndReviewId(String userEmail, int reviewId);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java	(revision 2084353c395b17ea6fa3f6a333b54ee39d76c9c4)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java	(date 1648525254356)
@@ -10,9 +10,13 @@
     public Company saveCompany(Company company) throws CompanyAlreadyExistsException;
     public Company getCompanyByCompanyName(String companyName) throws CompanyNotFoundException;
     public List<Company> getAllCompanies() throws CompanyNotFoundException;
-    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException;
-    public Review saveReview(Review review, String CompanyName) throws CompanyNotFoundException, ReviewAlreadyExistsException;
-    public Review updateReviewByReviewIdAndCompanyName(String companyName, int reviewId) throws ReviewNotFoundException;
-    public List<Review> getAllReviewsByUserEmail(String userEmail)throws UserNotFoundException;
-    public boolean deleteReviewByUserEmailAndReviewId(String userEmail, int reviewId);
+    public Company updateCompanyExceptReviews(Company company) throws CompanyNotFoundException;
+    public boolean deleteCompanyByCompanyName(String companyName) throws CompanyNotFoundException;
+
+    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException, CompanyNotFoundException;
+    public Review saveReview(Review review, String companyName) throws CompanyNotFoundException, ReviewAlreadyExistsException;
+    public Review updateReviewByCompanyName(String companyName, Review review) throws CompanyNotFoundException, ReviewNotFoundException;
+    public boolean deleteReviewByCompanyNameAndReviewId(String companyName, int reviewId) throws CompanyNotFoundException, ReviewNotFoundException;
+
+    //public List<Review> getAllReviewsByUserEmail(String userEmail)throws UserNotFoundException;
 }
Index: resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.service;\r\n\r\nimport com.stackroute.resourcesservice.domain.Company;\r\nimport com.stackroute.resourcesservice.domain.Review;\r\nimport com.stackroute.resourcesservice.exception.*;\r\nimport com.stackroute.resourcesservice.repository.ReviewRepository;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class ReviewServiceImpl implements ReviewService {\r\n\r\n    private ReviewRepository reviewRepository;\r\n\r\n    @Autowired\r\n    public ReviewServiceImpl(ReviewRepository reviewRepository) {\r\n        this.reviewRepository = reviewRepository;\r\n    }\r\n\r\n    @Override\r\n    public Company saveCompany(Company company) throws CompanyAlreadyExistsException {\r\n\r\n        if(reviewRepository.findById(company.getCompanyId()).isPresent() || reviewRepository.findByCompanyName(company.getCompanyName()) != null)\r\n            throw new CompanyAlreadyExistsException();\r\n\r\n        return reviewRepository.save(company);\r\n    }\r\n\r\n    @Override\r\n    public Company getCompanyByCompanyName(String companyName) throws CompanyNotFoundException {\r\n        Company company;\r\n        company = reviewRepository.findByCompanyName(companyName);\r\n        if(company == null)\r\n            throw new CompanyNotFoundException();\r\n        return company;\r\n    }\r\n\r\n    @Override\r\n    public List<Company> getAllCompanies() throws CompanyNotFoundException {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Review saveReview(Review review, String CompanyName) throws CompanyNotFoundException, ReviewAlreadyExistsException {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public Review updateReviewByReviewIdAndCompanyName(String companyName, int reviewId) throws ReviewNotFoundException {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public List<Review> getAllReviewsByUserEmail(String userEmail) throws UserNotFoundException {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean deleteReviewByUserEmailAndReviewId(String userEmail, int reviewId) {\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java	(revision 2084353c395b17ea6fa3f6a333b54ee39d76c9c4)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java	(date 1648525254307)
@@ -19,10 +19,12 @@
         this.reviewRepository = reviewRepository;
     }
 
+
+    //***Company Methods***
     @Override
     public Company saveCompany(Company company) throws CompanyAlreadyExistsException {
 
-        if(reviewRepository.findById(company.getCompanyId()).isPresent() || reviewRepository.findByCompanyName(company.getCompanyName()) != null)
+        if(reviewRepository.findById(company.getCin()).isPresent() || reviewRepository.findByCompanyName(company.getCompanyName()) != null)
             throw new CompanyAlreadyExistsException();
 
         return reviewRepository.save(company);
@@ -39,31 +41,114 @@
 
     @Override
     public List<Company> getAllCompanies() throws CompanyNotFoundException {
-        return null;
+        List<Company> companyList = reviewRepository.findAll();
+        if (companyList.isEmpty())
+            throw new CompanyNotFoundException();
+        return companyList;
     }
 
     @Override
-    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException {
-        return null;
+    public Company updateCompanyExceptReviews(Company company) throws CompanyNotFoundException {
+        Company companyFound = reviewRepository.findById(company.getCin()).get();
+
+        if (company == null)
+            throw new CompanyNotFoundException();
+        List<Review> reviewList = companyFound.getReviews();
+        if(reviewList != null)
+            company.setReviews(reviewList);
+
+        return reviewRepository.save(company);
     }
 
     @Override
-    public Review saveReview(Review review, String CompanyName) throws CompanyNotFoundException, ReviewAlreadyExistsException {
-        return null;
+    public boolean deleteCompanyByCompanyName(String companyName) throws CompanyNotFoundException {
+       Company company = reviewRepository.findByCompanyName(companyName);
+
+        if ( company == null)
+            throw new CompanyNotFoundException();
+        reviewRepository.deleteById(company.getCin());
+
+        return true;
     }
 
+
+    //***Review Methods***
     @Override
-    public Review updateReviewByReviewIdAndCompanyName(String companyName, int reviewId) throws ReviewNotFoundException {
-        return null;
+    public List<Review> getAllReviewsByCompanyName(String companyName) throws ReviewNotFoundException, CompanyNotFoundException {
+        List<Review> reviewList;
+        Company company;
+
+        company = getCompanyByCompanyName(companyName);
+        reviewList = company.getReviews();
+
+        if (reviewList == null)
+            throw new ReviewNotFoundException();
+
+        return reviewList;
     }
 
     @Override
-    public List<Review> getAllReviewsByUserEmail(String userEmail) throws UserNotFoundException {
-        return null;
+    public Review saveReview(Review review, String companyName) throws CompanyNotFoundException, ReviewAlreadyExistsException {
+        List<Review> reviewList;
+        Company company;
+        company = getCompanyByCompanyName(companyName);
+
+        reviewList = reviewRepository.findReviewByCompanyNameAndReviews_ReviewId(companyName, review.getReviewId());
+        if(!reviewList.isEmpty())
+            throw new ReviewAlreadyExistsException();
+        if(company.getReviews() != null)
+            company.getReviews().add(review);
+        //Condition for saving first Review.
+        else {
+            System.out.println("null value");
+            company.setReviews(List.of(review));
+        }
+        reviewRepository.save(company);
+
+        return review;
     }
 
     @Override
-    public boolean deleteReviewByUserEmailAndReviewId(String userEmail, int reviewId) {
-        return false;
+    public Review updateReviewByCompanyName(String companyName, Review review) throws CompanyNotFoundException, ReviewNotFoundException {
+        List<Review> list;
+        Company company;
+
+        company = getCompanyByCompanyName(companyName);
+
+        list = company.getReviews();
+
+        if(!list.stream().anyMatch((obj)->review.getReviewId() == obj.getReviewId()))
+            throw new ReviewNotFoundException();
+
+        list.removeIf(obj->review.getReviewId() == obj.getReviewId());
+        list.forEach((obj)-> System.out.println(obj));
+
+        list.add(review);
+        company.setReviews(list);
+        reviewRepository.save(company);
+
+        return review;
     }
+
+    @Override
+    public boolean deleteReviewByCompanyNameAndReviewId(String companyName, int reviewId) throws CompanyNotFoundException, ReviewNotFoundException {
+        List<Review> list;
+        Company company;
+
+        company = getCompanyByCompanyName(companyName);
+
+         list = company.getReviews();
+
+        if(!list.stream().anyMatch((obj)->reviewId == obj.getReviewId()))
+            throw new ReviewNotFoundException();
+
+        list.removeIf(obj->reviewId == obj.getReviewId());
+
+        company.setReviews(list);
+
+        reviewRepository.save(company);
+
+        return true;
+    }
+
 }
Index: resources-service/src/main/java/com/stackroute/resourcesservice/controller/SuggestionController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/controller/SuggestionController.java b/resources-service/src/main/java/com/stackroute/resourcesservice/controller/SuggestionController.java
new file mode 100644
--- /dev/null	(date 1648527675676)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/controller/SuggestionController.java	(date 1648527675676)
@@ -0,0 +1,74 @@
+package com.stackroute.resourcesservice.controller;
+
+import com.stackroute.resourcesservice.domain.Suggestion;
+import com.stackroute.resourcesservice.exception.SuggestionAlreadyExistsException;
+import com.stackroute.resourcesservice.exception.SuggestionNotFoundException;
+import com.stackroute.resourcesservice.service.SuggestionServiceImpl;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+
+@RestController
+@RequestMapping("api/v1/resources/suggestions/")
+public class SuggestionController {
+
+    private SuggestionServiceImpl suggestionService;
+
+    @Autowired
+    public SuggestionController(SuggestionServiceImpl suggestionService) {
+        this.suggestionService = suggestionService;
+    }
+
+    private ResponseEntity responseEntity;
+
+    @PostMapping("saveSuggestion")
+    public ResponseEntity<?> saveSuggestion(@RequestBody Suggestion suggestion) throws SuggestionAlreadyExistsException {
+        try{
+            responseEntity = new ResponseEntity<>(suggestionService.saveSuggestion(suggestion), HttpStatus.OK);
+        } catch (SuggestionAlreadyExistsException e) {
+            throw new SuggestionAlreadyExistsException();
+        } catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @GetMapping("getSuggestion")
+    public ResponseEntity<?> getSuggestions(@RequestParam("skillType") String skillType) throws SuggestionNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(suggestionService.getSuggestionBySkillType(skillType), HttpStatus.OK);
+        } catch (SuggestionNotFoundException e){
+            throw new SuggestionNotFoundException();
+        } catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @PutMapping("updateSuggestion")
+    public ResponseEntity<?> getSuggestions(@RequestBody Suggestion suggestion) throws SuggestionNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(suggestionService.updateSuggestion(suggestion), HttpStatus.OK);
+        } catch (SuggestionNotFoundException e){
+            throw new SuggestionNotFoundException();
+        } catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+    @DeleteMapping("deleteSuggestion")
+    public ResponseEntity<?> deleteSuggestions(@RequestParam("suggestionId") int suggestionId) throws SuggestionNotFoundException {
+        try{
+            responseEntity = new ResponseEntity<>(suggestionService.deleteSuggestion(suggestionId), HttpStatus.OK);
+        } catch (SuggestionNotFoundException e){
+            throw new SuggestionNotFoundException();
+        } catch (Exception e){
+            responseEntity = new ResponseEntity<>("Internal Server Error", HttpStatus.INTERNAL_SERVER_ERROR);
+        }
+        return responseEntity;
+    }
+
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/repository/SequenceRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SequenceRepository.java b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SequenceRepository.java
new file mode 100644
--- /dev/null	(date 1648399209164)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SequenceRepository.java	(date 1648399209164)
@@ -0,0 +1,9 @@
+package com.stackroute.resourcesservice.repository;
+
+import com.stackroute.resourcesservice.domain.Sequence;
+import org.springframework.data.mongodb.repository.MongoRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface SequenceRepository extends MongoRepository<Sequence, String> {
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/repository/SuggestionsRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SuggestionsRepository.java b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SuggestionsRepository.java
new file mode 100644
--- /dev/null	(date 1648526070604)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SuggestionsRepository.java	(date 1648526070604)
@@ -0,0 +1,13 @@
+package com.stackroute.resourcesservice.repository;
+
+import com.stackroute.resourcesservice.domain.Suggestion;
+import org.springframework.data.mongodb.repository.MongoRepository;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface SuggestionsRepository extends MongoRepository<Suggestion, Integer> {
+
+    List<Suggestion> findBySkillType(String skillType);
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/Suggestion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Suggestion.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Suggestion.java
new file mode 100644
--- /dev/null	(date 1648526017862)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Suggestion.java	(date 1648526017862)
@@ -0,0 +1,19 @@
+package com.stackroute.resourcesservice.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.data.annotation.Id;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+@Document(collection = "suggestions")
+public class Suggestion {
+
+    @Id
+    private int suggestionId;
+    private String skillType;
+    private String sourceUrl;
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionNotFoundException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionNotFoundException.java b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionNotFoundException.java
new file mode 100644
--- /dev/null	(date 1648525919179)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionNotFoundException.java	(date 1648525919179)
@@ -0,0 +1,8 @@
+package com.stackroute.resourcesservice.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(code = HttpStatus.NOT_FOUND, reason = "suggestion doesn't exists.")
+public class SuggestionNotFoundException extends Exception{
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionService.java b/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionService.java
new file mode 100644
--- /dev/null	(date 1648526491879)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionService.java	(date 1648526491879)
@@ -0,0 +1,15 @@
+package com.stackroute.resourcesservice.service;
+
+import com.stackroute.resourcesservice.domain.Suggestion;
+import com.stackroute.resourcesservice.exception.SuggestionAlreadyExistsException;
+import com.stackroute.resourcesservice.exception.SuggestionNotFoundException;
+
+import java.util.List;
+
+public interface SuggestionService {
+
+    public Suggestion saveSuggestion(Suggestion suggestion) throws SuggestionAlreadyExistsException;
+    public List<Suggestion> getSuggestionBySkillType(String skillType ) throws SuggestionNotFoundException;
+    public Suggestion updateSuggestion(Suggestion suggestion) throws SuggestionNotFoundException;
+    public boolean deleteSuggestion (int suggestionId) throws SuggestionNotFoundException;
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionServiceImpl.java b/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionServiceImpl.java
new file mode 100644
--- /dev/null	(date 1648526553370)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionServiceImpl.java	(date 1648526553370)
@@ -0,0 +1,55 @@
+package com.stackroute.resourcesservice.service;
+
+import com.stackroute.resourcesservice.domain.Suggestion;
+import com.stackroute.resourcesservice.exception.SuggestionAlreadyExistsException;
+import com.stackroute.resourcesservice.exception.SuggestionNotFoundException;
+import com.stackroute.resourcesservice.repository.SuggestionsRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+
+@Service
+public class SuggestionServiceImpl implements SuggestionService{
+
+    private SuggestionsRepository suggestionsRepository;
+
+    @Autowired
+    public SuggestionServiceImpl(SuggestionsRepository suggestionsRepository) {
+        this.suggestionsRepository = suggestionsRepository;
+    }
+
+    @Override
+    public Suggestion saveSuggestion(Suggestion suggestion) throws SuggestionAlreadyExistsException {
+        if (suggestionsRepository.findById(suggestion.getSuggestionId()).isPresent())
+            throw new SuggestionAlreadyExistsException();
+        return suggestionsRepository.save(suggestion);
+    }
+
+    @Override
+    public List<Suggestion> getSuggestionBySkillType(String skillType) throws SuggestionNotFoundException {
+        List<Suggestion> suggestionList;
+
+        suggestionList = suggestionsRepository.findBySkillType(skillType);
+        if (suggestionList == null)
+            throw new SuggestionNotFoundException();
+
+        return suggestionList;
+    }
+
+    @Override
+    public Suggestion updateSuggestion(Suggestion suggestion) throws SuggestionNotFoundException {
+        if (suggestionsRepository.findById(suggestion.getSuggestionId()).isEmpty())
+            throw new SuggestionNotFoundException();
+
+        return suggestionsRepository.save(suggestion);
+    }
+
+    @Override
+    public boolean deleteSuggestion(int suggestionId) throws SuggestionNotFoundException {
+        if (suggestionsRepository.findById(suggestionId).isEmpty())
+            throw new SuggestionNotFoundException();
+        suggestionsRepository.deleteById(suggestionId);
+        return true;
+    }
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionAlreadyExistsException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionAlreadyExistsException.java b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionAlreadyExistsException.java
new file mode 100644
--- /dev/null	(date 1648525919001)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionAlreadyExistsException.java	(date 1648525919001)
@@ -0,0 +1,8 @@
+package com.stackroute.resourcesservice.exception;
+
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
+
+@ResponseStatus(code = HttpStatus.FOUND, reason = "suggestion already exists.")
+public class SuggestionAlreadyExistsException extends Exception{
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.repository;\r\n\r\nimport com.stackroute.resourcesservice.domain.Company;\r\nimport org.springframework.data.mongodb.repository.MongoRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\n@Repository\r\npublic interface ReviewRepository extends MongoRepository<Company, Integer> {\r\n    public Company findByCompanyName(String companyName);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java	(revision 2084353c395b17ea6fa3f6a333b54ee39d76c9c4)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java	(date 1648464444912)
@@ -1,10 +1,19 @@
 package com.stackroute.resourcesservice.repository;
 
 import com.stackroute.resourcesservice.domain.Company;
+import com.stackroute.resourcesservice.domain.Review;
+import org.springframework.data.mongodb.repository.Aggregation;
 import org.springframework.data.mongodb.repository.MongoRepository;
+import org.springframework.data.mongodb.repository.Query;
 import org.springframework.stereotype.Repository;
 
+import java.util.List;
+
 @Repository
-public interface ReviewRepository extends MongoRepository<Company, Integer> {
-    public Company findByCompanyName(String companyName);
+public interface ReviewRepository extends MongoRepository<Company, String> {
+    Company findByCompanyName(String companyName);
+    @Query(value = "{'companyName': '?0', 'reviews.reviewId': ?1}", fields = "{companyId: 0, 'reviews.$': 1}" )
+    List<Review> findReviewByCompanyNameAndReviews_ReviewId(String companyName, int reviewId);
+    //@Aggregation("[{ '$match': { companyId: '?0' } }, { $addFields: { reviews: { $concatArrays: [ '$reviews', [?1] ] } } }]")
+   // List<Review> groupByCompanyNameAndReviews_ReviewIdAnd(Company company,Review review);
 }
Index: resources-service/src/main/java/com/stackroute/resourcesservice/service/SequenceService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/service/SequenceService.java b/resources-service/src/main/java/com/stackroute/resourcesservice/service/SequenceService.java
new file mode 100644
--- /dev/null	(date 1648399655217)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/service/SequenceService.java	(date 1648399655217)
@@ -0,0 +1,32 @@
+package com.stackroute.resourcesservice.service;
+
+import com.stackroute.resourcesservice.domain.Sequence;
+import com.stackroute.resourcesservice.repository.SequenceRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class SequenceService {
+
+    private SequenceRepository sequenceRepository;
+
+    @Autowired
+    public SequenceService(SequenceRepository sequenceRepository) {
+        this.sequenceRepository = sequenceRepository;
+    }
+
+    public int getSequenceNumber(String sequenceName){
+
+        int number=0;
+        Sequence sequence;
+        if (sequenceRepository.findById(sequenceName).isPresent()) {
+            sequence = sequenceRepository.findById(sequenceName).get();
+            number = sequence.getSequenceNumber();
+        }
+
+        sequence = new Sequence(sequenceName, number +1);
+        sequenceRepository.save(sequence);
+
+        return number + 1;
+    }
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/Sequence.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Sequence.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Sequence.java
new file mode 100644
--- /dev/null	(date 1648376159714)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Sequence.java	(date 1648376159714)
@@ -0,0 +1,18 @@
+package com.stackroute.resourcesservice.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import org.springframework.data.annotation.Id;
+import org.springframework.data.mongodb.core.mapping.Document;
+
+@Document
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class Sequence {
+
+    @Id
+    private String id;
+    private int sequenceNumber;
+}
Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.domain;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport org.springframework.data.mongodb.core.index.Indexed;\r\nimport org.springframework.data.mongodb.core.mapping.Document;\r\n\r\nimport java.util.Date;\r\n\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Review {\r\n    @Indexed(unique = true)\r\n    private int reviewId;\r\n    private User user;\r\n    private String prosMessage;\r\n    private String consMessage;\r\n    private Date reviewDate;\r\n\r\n    enum Ratings {\r\n        POOR,\r\n        NOT_BAD,\r\n        GOOD,\r\n        VERY_GOOD,\r\n        EXCELLENT\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java	(revision 2084353c395b17ea6fa3f6a333b54ee39d76c9c4)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java	(date 1648447619788)
@@ -3,6 +3,8 @@
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.NoArgsConstructor;
+import org.springframework.data.annotation.Id;
+import org.springframework.data.annotation.Transient;
 import org.springframework.data.mongodb.core.index.Indexed;
 import org.springframework.data.mongodb.core.mapping.Document;
 
@@ -12,14 +14,18 @@
 @NoArgsConstructor
 @AllArgsConstructor
 public class Review {
-    @Indexed(unique = true)
+    @Transient
+    public static final String sequenceName = "review_id_generation";
+
+    @Id
     private int reviewId;
     private User user;
     private String prosMessage;
     private String consMessage;
     private Date reviewDate;
+    private Ratings companyRatings;
 
-    enum Ratings {
+    public enum Ratings {
         POOR,
         NOT_BAD,
         GOOD,
Index: resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.stackroute.resourcesservice.domain;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\nimport org.springframework.data.annotation.Id;\r\nimport org.springframework.data.mongodb.core.index.Indexed;\r\nimport org.springframework.data.mongodb.core.mapping.Document;\r\n\r\nimport java.util.List;\r\n\r\n@Document(collection = \"companyReviews\")\r\n@Data\r\n@NoArgsConstructor\r\n@AllArgsConstructor\r\npublic class Company {\r\n    @Id\r\n    private int companyId;\r\n    @Indexed(unique = true)\r\n    private String companyName;\r\n    private byte[] companyLogo;\r\n    private List<Review> reviews;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java
--- a/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java	(revision 2084353c395b17ea6fa3f6a333b54ee39d76c9c4)
+++ b/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java	(date 1648464444805)
@@ -15,7 +15,7 @@
 @AllArgsConstructor
 public class Company {
     @Id
-    private int companyId;
+    private String cin;
     @Indexed(unique = true)
     private String companyName;
     private byte[] companyLogo;
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"76eda49d-3c91-4548-b5a4-af212656ad3f\" name=\"Changes\" comment=\"Added external API for Salary Trend\">\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/User.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyAlreadyExistsException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyNotFoundException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewAlreadyExistsException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewNotFoundException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/UserNotFoundException.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/resources-service/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/resources-service/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/resources-service/src/main/resources/application.properties\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/resources-service/src/main/resources/application.properties\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"26lx3WiB0vLZikCV6IamjMwlDoY\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Project\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.TrendLabServiceApplication\">\r\n    <configuration name=\"RecommendationServiceApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.stackroute.recommendationservice.RecommendationServiceApplication\" />\r\n      <module name=\"recommendation-service\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.stackroute.recommendationservice.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ResourcesServiceApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.stackroute.resourcesservice.ResourcesServiceApplication\" />\r\n      <module name=\"resources-service\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.stackroute.resourcesservice.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"TrendLabServiceApplication\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.stackroute.trendlabservice.TrendLabServiceApplication\" />\r\n      <module name=\"trend-lab-service\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.stackroute.trendlabservice.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.TrendLabServiceApplication\" />\r\n        <item itemvalue=\"Application.RecommendationServiceApplication\" />\r\n        <item itemvalue=\"Application.ResourcesServiceApplication\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"92eea1fd-0ae1-4cdb-8344-3ff65a5c8dfe\" name=\"Changes\" comment=\"\" />\r\n      <created>1648011784513</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1648011784513</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Added WorkDetails model class\">\r\n      <created>1648024483342</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648024483342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Added WorkDetails model class\">\r\n      <created>1648024582226</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648024582226</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Added WorkDetails model class\">\r\n      <created>1648024765642</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648024765642</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Added external API for Salary Trend\">\r\n      <created>1648108242164</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648108242164</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"creating attributes\">\r\n      <created>1648032759832</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648032759832</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"updated pom\">\r\n      <created>1648034140722</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648034140722</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"updated application properties\">\r\n      <created>1648034257572</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648034257572</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"created domain layer\">\r\n      <created>1648034378941</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648034378941</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Added Resources service\" />\r\n    <MESSAGE value=\"Added port,lombok DI,Review Domain\" />\r\n    <MESSAGE value=\"Added WorkDetails model class\" />\r\n    <MESSAGE value=\"updated port\" />\r\n    <MESSAGE value=\"domain layer\" />\r\n    <MESSAGE value=\"creating attributes\" />\r\n    <MESSAGE value=\"updated pom\" />\r\n    <MESSAGE value=\"updated application properties\" />\r\n    <MESSAGE value=\"created domain layer\" />\r\n    <MESSAGE value=\"Added external API for Salary Trend\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Added external API for Salary Trend\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2084353c395b17ea6fa3f6a333b54ee39d76c9c4)
+++ b/.idea/workspace.xml	(date 1648527675905)
@@ -4,22 +4,24 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="76eda49d-3c91-4548-b5a4-af212656ad3f" name="Changes" comment="Added external API for Salary Trend">
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/User.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyAlreadyExistsException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/CompanyNotFoundException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewAlreadyExistsException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/ReviewNotFoundException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/UserNotFoundException.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/resources-service/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/pom.xml" afterDir="false" />
+    <list default="true" id="76eda49d-3c91-4548-b5a4-af212656ad3f" name="Changes" comment="added execution of 2 controller methods">
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/controller/SuggestionController.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Sequence.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Suggestion.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionAlreadyExistsException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/exception/SuggestionNotFoundException.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SequenceRepository.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/repository/SuggestionsRepository.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/SequenceService.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionService.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/SuggestionServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/controller/ReviewController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Company.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/Review.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/domain/WorkDetails.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/resources-service/src/main/resources/application.properties" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/resources/application.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/repository/ReviewRepository.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/resources-service/src/main/java/com/stackroute/resourcesservice/service/ReviewServiceImpl.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -62,7 +64,7 @@
     <property name="project.structure.proportion" value="0.0" />
     <property name="project.structure.side.proportion" value="0.0" />
   </component>
-  <component name="RunManager" selected="Application.TrendLabServiceApplication">
+  <component name="RunManager" selected="Application.ResourcesServiceApplication">
     <configuration name="RecommendationServiceApplication" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="com.stackroute.recommendationservice.RecommendationServiceApplication" />
       <module name="recommendation-service" />
@@ -104,16 +106,16 @@
     </configuration>
     <recent_temporary>
       <list>
+        <item itemvalue="Application.ResourcesServiceApplication" />
         <item itemvalue="Application.TrendLabServiceApplication" />
         <item itemvalue="Application.RecommendationServiceApplication" />
-        <item itemvalue="Application.ResourcesServiceApplication" />
       </list>
     </recent_temporary>
   </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="92eea1fd-0ae1-4cdb-8344-3ff65a5c8dfe" name="Changes" comment="" />
+      <changelist id="76eda49d-3c91-4548-b5a4-af212656ad3f" name="Changes" comment="added execution of 2 controller methods" />
       <created>1648011784513</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
@@ -147,12 +149,12 @@
       <option name="project" value="LOCAL" />
       <updated>1648108242164</updated>
     </task>
-    <task id="LOCAL-00005" summary="creating attributes">
-      <created>1648032759832</created>
+    <task id="LOCAL-00005" summary="added execution of 2 controller methods">
+      <created>1648110811407</created>
       <option name="number" value="00005" />
       <option name="presentableId" value="LOCAL-00005" />
       <option name="project" value="LOCAL" />
-      <updated>1648032759832</updated>
+      <updated>1648110811407</updated>
     </task>
     <task id="LOCAL-00006" summary="updated pom">
       <created>1648034140722</created>
@@ -175,7 +177,7 @@
       <option name="project" value="LOCAL" />
       <updated>1648034378941</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -200,6 +202,7 @@
     <MESSAGE value="updated application properties" />
     <MESSAGE value="created domain layer" />
     <MESSAGE value="Added external API for Salary Trend" />
-    <option name="LAST_COMMIT_MESSAGE" value="Added external API for Salary Trend" />
+    <MESSAGE value="added execution of 2 controller methods" />
+    <option name="LAST_COMMIT_MESSAGE" value="added execution of 2 controller methods" />
   </component>
 </project>
\ No newline at end of file
